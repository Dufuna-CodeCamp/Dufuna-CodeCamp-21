<?php

namespace App\Controller;

use App\Model\Article;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class TestUserController
{

    public function index(Request $request, Response $response, $args)
    {
        $articles=Article::all();
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }

    public function published(Request $request, Response $response, $args)
    {
        $articles=Article::where('status', 'published')->get();
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }


    public function findById(Request $request, Response $response, $args)
    {
        $id = $args['id'];
        $articles = Article::find($id);

        if (!$articles) {
            $response->getBody()->write(json_encode( ['error' => 'Artical not found'] ));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
        }
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }
    

    public function create (Request $request, Response $response, $args)
    {
        $data = $request->getParsedBody();

        $createdAt = date('Y-m-d H:i:s');
        $articles = Article::create([
            'title' => $data['title'],
            'description' => $data['description'],
            'status' => $data['status'],
            'created_by' => $data['created_by'],
            "created_at" => $createdAt
        ]);

        $articles->save();
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }

    public function publish(Request $request, Response $response, $args)
    {
        $data = $request->getParsedBody();
        $id = $args['id'];
        $articles = Article::find($id);
        $articles->fill(['status' => 'published']);
        $articles->save();
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }

    public function delete(Request $request, Response $response, $args)
    {
        $id = $args['id'];
        $articles = Article::find($id);
        if (!$articles) {
            $response->getBody()->write(\json_encode([ 'error' => 'Article not found']));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
        }
        $articles->delete();
        $response->getBody()->write(\json_encode(['message' => 'This article was successsfully deleted']));
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }

    public function update(Request $request, Response $response, $args)
    {
        $data = $request->getParsedBody();
        $id = $args['id'];
        $articles = Article::find($id);
        $articles->title = $data['title']?: $articles->title;
        $articles->description = $data['description']?: $articles->description;
        $articles->status = $data['status']?: $articles->status;
        $articles->created_by = $data['created_by']?: $articles->created_by;
        $articles->save();
        $response->getBody()->write($articles->toJson());
        return $response->withHeader('Content-Type', 'application/json')->withStatus(200);
    }
    
}